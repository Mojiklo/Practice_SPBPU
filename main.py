import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
MAIN_MENU, COURSES, BAKERY_ORDER, PAYMENT, ORDER_DETAILS = range(5)

# Start command handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã", callback_data="courses")],
        [InlineKeyboardButton("üç∞ –ó–∞–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π", callback_data="bakery")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π –°–æ—Ñ–∏–∫–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=reply_markup
    )
    return MAIN_MENU

# Help command handler
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*/start* - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "*/courses* - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n"
        "*/order* - –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π\n"
        "*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: example@email.com"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

# Callback query handler
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle button presses."""
    query = update.callback_query
    await query.answer()
    
    if query.data == "courses":
        return await show_courses(update, context)
    elif query.data == "bakery":
        return await bakery_order(update, context)
    elif query.data == "help":
        await query.edit_message_text(
            "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "*/start* - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
            "*/courses* - –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n"
            "*/order* - –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π\n"
            "*/help* - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: example@email.com",
            parse_mode="Markdown"
        )
        return MAIN_MENU
    elif query.data.startswith("course_"):
        course_id = query.data.split("_")[1]
        return await course_details(update, context, course_id)
    elif query.data.startswith("pay_course_"):
        course_id = query.data.split("_")[2]
        return await process_payment(update, context, course_id)
    elif query.data.startswith("bakery_item_"):
        item_id = query.data.split("_")[2]
        return await add_to_order(update, context, item_id)
    elif query.data == "checkout":
        return await checkout(update, context)
    elif query.data == "back_to_main":
        keyboard = [
            [InlineKeyboardButton("üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã", callback_data="courses")],
            [InlineKeyboardButton("üç∞ –ó–∞–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π", callback_data="bakery")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=reply_markup
        )
        return MAIN_MENU
    
    return MAIN_MENU

# Show available courses
async def show_courses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show available courses."""
    # Sample courses data - in a real app, this would come from a database
    courses = [
        {"id": "1", "name": "–û—Å–Ω–æ–≤—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞", "price": 5000},
        {"id": "2", "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", "price": 7500},
        {"id": "3", "name": "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ", "price": 6000}
    ]
    
    keyboard = []
    for course in courses:
        keyboard.append([InlineKeyboardButton(
            f"{course['name']} - {course['price']} —Ä—É–±.", 
            callback_data=f"course_{course['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query = update.callback_query
    if query:
        await query.edit_message_text(
            "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã:*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return COURSES

# Course details
async def course_details(update: Update, context: ContextTypes.DEFAULT_TYPE, course_id: str) -> int:
    """Show course details and payment options."""
    # Sample course details - in a real app, this would come from a database
    courses = {
        "1": {
            "name": "–û—Å–Ω–æ–≤—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            "description": "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∫–æ–Ω–¥–∏—Ç–µ—Ä–æ–≤. –í—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã —Ç–µ—Å—Ç–∞, –∫—Ä–µ–º–æ–≤ –∏ –Ω–∞—á–∏–Ω–æ–∫.",
            "duration": "4 –Ω–µ–¥–µ–ª–∏",
            "price": 5000
        },
        "2": {
            "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è",
            "description": "–ö—É—Ä—Å –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å–≤–æ–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–æ—Ä—Ç–æ–≤ –∏ –ø–∏—Ä–æ–∂–Ω—ã—Ö.",
            "duration": "6 –Ω–µ–¥–µ–ª—å",
            "price": 7500
        },
        "3": {
            "name": "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ",
            "description": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –ø–æ —Ä–∞–±–æ—Ç–µ —Å —à–æ–∫–æ–ª–∞–¥–æ–º. –í—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ç–µ–º–ø–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —à–æ–∫–æ–ª–∞–¥ –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã.",
            "duration": "3 –Ω–µ–¥–µ–ª–∏",
            "price": 6000
        }
    }
    
    course = courses.get(course_id)
    if not course:
        await update.callback_query.edit_message_text("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å.")
        return await show_courses(update, context)
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å", callback_data=f"pay_course_{course_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º", callback_data="courses")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    course_text = (
        f"*{course['name']}*\n\n"
        f"{course['description']}\n\n"
        f"*–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {course['duration']}\n"
        f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {course['price']} —Ä—É–±."
    )
    
    await update.callback_query.edit_message_text(
        course_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return COURSES

# Process payment for a course
async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, course_id: str) -> int:
    """Process payment for a course."""
    # Sample course details - in a real app, this would come from a database
    courses = {
        "1": {"name": "–û—Å–Ω–æ–≤—ã –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞", "price": 5000},
        "2": {"name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è", "price": 7500},
        "3": {"name": "–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ", "price": 6000}
    }
    
    course = courses.get(course_id)
    if not course:
        await update.callback_query.edit_message_text("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å.")
        return await show_courses(update, context)
    
    # In a real app, you would integrate with a payment provider here
    # For this example, we'll just simulate a payment process
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data=f"payment_card_{course_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"course_{course_id}")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞: *{course['name']}*\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: *{course['price']} —Ä—É–±.*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    # Schedule a payment reminder for 24 hours later
    job_context = {
        'chat_id': update.effective_chat.id,
        'user_id': update.effective_user.id,
        'course_name': course['name'],
        'course_price': course['price']
    }
    context.job_queue.run_once(payment_reminder, 86400, data=job_context, name=f"reminder_{update.effective_user.id}_{course_id}")
    
    return PAYMENT

# Payment reminder
async def payment_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a payment reminder."""
    job_data = context.job.data
    await context.bot.send_message(
        job_data['chat_id'],
        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ *{job_data['course_name']}* "
        f"–Ω–∞ —Å—É–º–º—É *{job_data['course_price']} —Ä—É–±.*\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å —Å–Ω–æ–≤–∞.",
        parse_mode="Markdown"
    )

# Bakery order
async def bakery_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show bakery items for ordering."""
    # Sample bakery items - in a real app, this would come from a database
    bakery_items = [
        {"id": "1", "name": "–¢–æ—Ä—Ç '–ù–∞–ø–æ–ª–µ–æ–Ω'", "price": 1500},
        {"id": "2", "name": "–≠–∫–ª–µ—Ä—ã (–Ω–∞–±–æ—Ä 6 —à—Ç.)", "price": 800},
        {"id": "3", "name": "–ú–∞–∫–∞—Ä–æ–Ω—Å (–Ω–∞–±–æ—Ä 12 —à—Ç.)", "price": 1200},
        {"id": "4", "name": "–ß–∏–∑–∫–µ–π–∫", "price": 900}
    ]
    
    # Initialize order in user data if not exists
    if 'order' not in context.user_data:
        context.user_data['order'] = []
    
    keyboard = []
    for item in bakery_items:
        keyboard.append([InlineKeyboardButton(
            f"{item['name']} - {item['price']} —Ä—É–±.", 
            callback_data=f"bakery_item_{item['id']}"
        )])
    
    # Add checkout button if there are items in the order
    if context.user_data['order']:
        total = sum(item['price'] * item['quantity'] for item in context.user_data['order'])
        keyboard.append([InlineKeyboardButton(f"üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ ({total} —Ä—É–±.)", callback_data="checkout")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Show current order if exists
    order_text = ""
    if context.user_data['order']:
        order_text = "\n\n*–í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:*\n"
        for item in context.user_data['order']:
            order_text += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price'] * item['quantity']} —Ä—É–±.\n"
    
    query = update.callback_query
    if query:
        await query.edit_message_text(
            "üç∞ *–ú–µ–Ω—é –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π –°–æ—Ñ–∏–∫–æ:*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:" + order_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            "üç∞ *–ú–µ–Ω—é –∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π –°–æ—Ñ–∏–∫–æ:*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:" + order_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return BAKERY_ORDER

# Add item to order
async def add_to_order(update: Update, context: ContextTypes.DEFAULT_TYPE, item_id: str) -> int:
    """Add an item to the order."""
    # Sample bakery items - in a real app, this would come from a database
    bakery_items = {
        "1": {"name": "–¢–æ—Ä—Ç '–ù–∞–ø–æ–ª–µ–æ–Ω'", "price": 1500},
        "2": {"name": "–≠–∫–ª–µ—Ä—ã (–Ω–∞–±–æ—Ä 6 —à—Ç.)", "price": 800},
        "3": {"name": "–ú–∞–∫–∞—Ä–æ–Ω—Å (–Ω–∞–±–æ—Ä 12 —à—Ç.)", "price": 1200},
        "4": {"name": "–ß–∏–∑–∫–µ–π–∫", "price": 900}
    }
    
    item = bakery_items.get(item_id)
    if not item:
        await update.callback_query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.")
        return await bakery_order(update, context)
    
    # Initialize order in user data if not exists
    if 'order' not in context.user_data:
        context.user_data['order'] = []
    
    # Check if item already in order
    for order_item in context.user_data['order']:
        if order_item['id'] == item_id:
            order_item['quantity'] += 1
            break
    else:
        # Add new item to order
        context.user_data['order'].append({
            'id': item_id,
            'name': item['name'],
            'price': item['price'],
            'quantity': 1
        })
    
    await update.callback_query.answer(f"{item['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑!")
    
    # Return to bakery order menu
    return await bakery_order(update, context)

# Checkout process
async def checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Process the checkout."""
    if not context.user_data.get('order'):
        await update.callback_query.edit_message_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑.")
        return await bakery_order(update, context)
    
    # Calculate total
    total = sum(item['price'] * item['quantity'] for item in context.user_data['order'])
    
    # Format order details
    order_details = "*–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n"
    for item in context.user_data['order']:
        order_details += f"‚Ä¢ {item['name']} x{item['quantity']} - {item['price'] * item['quantity']} —Ä—É–±.\n"
    
    order_details += f"\n*–ò—Ç–æ–≥–æ:* {total} —Ä—É–±."
    
    keyboard = [
        [InlineKeyboardButton("üì± –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="provide_contact")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é", callback_data="bakery")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        f"üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n"
        f"{order_details}\n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return ORDER_DETAILS

# Main function
def main() -> None:
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # Add conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(button),
                CommandHandler("courses", show_courses),
                CommandHandler("order", bakery_order)
            ],
            COURSES: [
                CallbackQueryHandler(button)
            ],
            BAKERY_ORDER: [
                CallbackQueryHandler(button)
            ],
            PAYMENT: [
                CallbackQueryHandler(button)
            ],
            ORDER_DETAILS: [
                CallbackQueryHandler(button)
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    
    # Add standalone command handlers
    application.add_handler(CommandHandler("help", help_command))
    
    # Start the Bot
    application.run_polling()

if __name__ == "__main__":
    main()